<?php

/**
 * User: Martinus - Samuel Szabo
 * Date: 24.11.2017
 */

namespace Salamek\PplMyApi;

use Salamek\PplMyApi\Enum\PackageService;
use Salamek\PplMyApi\Enum\Product;
use Salamek\PplMyApi\Enum\Country;
use Salamek\PplMyApi\Exception\NotImplementedException;
use Salamek\PplMyApi\Model\IPackage;
use Salamek\PplMyApi\Model\Package;

class ZplLabel implements ILabel {

    /**
     * @param Package[] $packages
     * @param type $decomposition
     * @param type $quarterPosition
     * @param \DateTime $printDate
     * @return type
     * @throws \InvalidArgumentException
     */
    public static function generateLabels(array $packages, $decomposition = null, $quarterPosition = null, ?\DateTime $printDate = null) {
        if (!is_null($decomposition)) {
            throw new \InvalidArgumentException('ZplLabel::generateLabels does not support $decomposition');
        }
        
        if (!is_null($quarterPosition)) {
            throw new \InvalidArgumentException('ZplLabel::generateLabels does not support $quarterPosition');
        }

        $packageNumbers = [];

        $zplString = '';
        /**
         *
         *
         * @var Package $package
         */
        foreach ($packages AS $package) {
            $zplString .= self::generateLabel($package, $printDate);
        }

        return $zplString;
    }

    /**
     * @param IPackage $package
     * @return string
     */
    public static function generateLabel(IPackage $package, ?\DateTime $printDate = null) {
        if ($printDate === null) {
            $printDate = new \DateTime();
        }
        
        //page setup
        $zpl = '^XA^MUM^LH2,2^LS0^PON';

        //font and utf8
        $zpl .= '^CW0,E:OSWALDSB.TTF^CI28';

        //ppl logo:
        $zpl

        //boxes and static text
        $zpl .= '^FO45,55^GB44,80,0.3,B,0^FS';
        $zpl .= '^FO16,55^GB26,80,0.3,B,0^FS';
        $zpl .= '^FO0,118^GB9,17,0.3,B,0^FS';
        $zpl .= '^FO89,55^A0R,2^FDConsignee / Příjemce^FS';
        $zpl .= '^FO42,55^A0R,2^FDConsignor / Odesílatel^FS';
        $zpl .= '^FO42,108^A0R,2^FDDatum tisku etikety: ' . $printDate->format('j.n.Y') . '^FS';
        $zpl .= '^FO89,85^A0R,2^FDhttp://www.ppl.cz^FS';

        //COD
        if (in_array($package->getPackageProductType(), Product::$cashOnDelivery)) {
            $zpl .= sprintf('^FO1,55^A0R,6,5^FDCOD/DOB: %.2f %s^FS', $package->getPaymentInfo()->getCashOnDeliveryPrice(), $package->getPaymentInfo()->getCashOnDeliveryCurrency());
        }

        //package number and barcodes
        $zpl .= sprintf('^FO5,20^BY0.4,3,32^BCN,28,N,N^FD%s-%s^FS', $package->getPackageNumber(), $package->getCityRouting()->getRouteCode());
        $zpl .= sprintf('^FO36,49^A0N,3^FD%s-%s^FS', $package->getPackageNumber(), $package->getCityRouting()->getRouteCode());
        $zpl .= sprintf('^FO16,95^BY0.4,2,10^B2R,9,N,N,Y^FD%s^FS', $package->getPackageNumber());
        $zpl .= sprintf('^FO9,100^A0R,5^FD%s^FS', $package->getPackageNumber());

        //recipient
        $zpl .= sprintf('^FO82,58^A0R,4^FD%s^FS', $package->getRecipient()->getName2());
        $zpl .= sprintf('^FO77,58^A0R,4^FD%s^FS', $package->getRecipient()->getName());
        $zpl .= sprintf('^FO72,58^A0R,4^FD%s^FS', $package->getRecipient()->getStreet());
        $zpl .= sprintf('^FO67,58^A0R,4^FD%s^FS', $package->getRecipient()->getCity());
        $zpl .= sprintf('^FO57,58^A0R,8^FD%s^FS', $package->getRecipient()->getZipCode());
        $zpl .= sprintf('^FO53,58^A0R,3^FD%s^FS', $package->getRecipient()->getContact());
        $zpl .= sprintf('^FO48,58^A0R,3^FDTel: %s^FS', $package->getRecipient()->getPhone());
        if ($package->getRecipient()->getCountry() <> Country::CZ) {
            $zpl .= '^FO45,120^GB11,15,0.3,B,0^FS';
            $zpl .= sprintf('^FO44,122^A0R,10^FD%s^FS', $package->getRecipient()->getCountry());
        }

        //sender
        $zpl .= sprintf('^FO35,58^A0R,4^FD%s^FS', $package->getSender()->getName());
        $zpl .= sprintf('^FO30,58^A0R,4^FD%s^FS', $package->getSender()->getStreet());
        $zpl .= sprintf('^FO25,58^A0R,4^FD%s^FS', $package->getSender()->getCity());
        $zpl .= sprintf('^FO20,58^A0R,4^FD%s^FS', $package->getSender()->getZipCode());

        //package count
        $zpl .= sprintf('^FO0,122^A0R,7^FD%s/%s^FS', $package->getPackageSet()->getPackagePosition(), $package->getPackageSet()->getPackageCount());

        //package routing ZIP
        $zpl .= sprintf('^FO35,3^A0N,7^FD%s^FS', $package->getRecipient()->getZipCode());

        //package routing route code
        $zpl .= sprintf('^FO65,3^A0N,10^FD%s^FS', $package->getCityRouting()->getRouteCode());

        //package routing depo
        if ($package->getCityRouting()->getHighlighted()) {
            $zpl .= sprintf('^FO5,2^GB18,17,1,B,0^FS');
        }
        $zpl .= sprintf('^FO7,6^A0N,13^FD%s^FS', $package->getCityRouting()->getDepoCode() ?? $package->getDepoCode());

        //package routing country
        if ($package->getRecipient()->getCountry() <> Country::CZ) {
            $zpl .= sprintf('^FO65,12^A0N,10^FD%s^FS', $package->getRecipient()->getCountry());
        }

        //package routing service
        if ($package->getRecipient()->getCountry() <> Country::CZ) {
            $zpl .= sprintf('^FO35,13^A0N,7^FD%s^FS', in_array($package->getPackageProductType(), Product::$cashOnDelivery) ? 'COD' : '');
        } else {
            $zpl .= sprintf('^FO35,13^A0N,7^FD%s^FS', in_array(PackageService::EVENING_DELIVERY, \Salamek\PplMyApi\Model\PackageService::packageServicesToArray($package)) ? 'VEČER' : '');
        }

        //package type
        $zpl .= sprintf('^FO92,55^A0R,3^FD%s^FS', Product::getName($package->getPackageProductType()));

        //comment and reference
        //$zpl .= sprintf('^FO12, 58^A0R, 3^FDPozn.: poznámka^FS');
        //$zpl .= sprintf('^FO9, 58^A0R, 3^FDRef.: externí reference^FS');
        //reset page setup
        $zpl .= '^LH0,0^MUD';
        //end
        $zpl .= '^XZ';

        return $zpl;
    }

    /**
     * @param $pdf
     * @param $package
     * @throws \Exception
     */
    public static function generateLabelFull($pdf, $package, ?\DateTime $printDate = null) {
        throw new NotImplementedException();
    }

    /**
     * @param $pdf
     * @param $package
     * @param $position
     * @throws \Exception
     */
    public static function generateLabelQuarter($pdf, $package, $position = null, ?\DateTime $printDate = null) {
        throw new NotImplementedException();
    }

}
